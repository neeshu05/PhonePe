Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row


def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
    row,cols = len(matrix),len(matrix[0])
    l,r = 0 ,row - 1

    while r >= l:
        mid = (l + r)//2
        if target > matrix[mid][-1]:
            l = mid + 1
        elif target < matrix[mid][0]:
            r = mid - 1
        else:
            break

    mid = (l + r)//2
    l1 = 0
    r1 = cols - 1
    while r1 >= l1:
        mid1 = (r1+ l1)//2
        if target == matrix[mid][mid1]:
            return True
        elif target > matrix[mid][mid1]:
            l1 = mid1 + 1
        else:
            r1 = mid1 - 1
    return False
