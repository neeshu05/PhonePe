Given a string s and an integer k, return the length of the longest substring of s 
such that the frequency of each character in this substring is greater than or equal to k.

// standard sliding window concept
// when have < need: we increase our window size
// where till have == need: we shrink our window 

def longestSubstring(self, s: str, k: int) -> int:
    t = Counter(s)
    unique = len(t)
    ans = 0
    for num in range(1,27):
        count = defaultdict(int)
        l = 0
        for r in range(len(s)):
            count[s[r]] += 1

            while len(count) > num:
                count[s[l]] -= 1
                if count[s[l]] == 0:
                    del count[s[l]]
                l += 1

            #neeshu = all(count[key] >=k for key in count)  
            for key in count:
                if count[key] >= k:
                    flag = 1
                else:
                    flag = 0
                    break
            if flag == 1:
            #if neeshu:
                ans = max(ans,r - l +1)
    return ans
