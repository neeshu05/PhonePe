You are standing at position 0 on an infinite number line. There is a destination at position target.
You can make some number of moves numMoves so that:

On each move, you can either go left or right.
During the ith move (starting from i == 1 to i == numMoves), you take i steps in the chosen direction.
Given the integer target, return the minimum number of moves required (i.e., the minimum numMoves) to reach the destination.

Input: target = 2
Output: 3
Explanation:
On the 1st move, we step from 0 to 1 (1 step).
On the 2nd move, we step from 1 to -1 (2 steps).
On the 3rd move, we step from -1 to 2 (3 steps).

//https://leetcode.com/problems/reach-a-number/

def reachNumber(self, target: int) -> int:
    #bfs(tle)
    queue = deque[(0,0)] #cur_number and jumps
    
    while queue:
      cur_number,jumps = queue.pop()
      if cur_number == target:
        return jumsps
      positive jumps
      queue.append(cur_number+(jumps+1),jumps + 1)
      #negative jumps
      queue.append(cur_number-(jumps+1),jumps + 1)
    
    #maths
    target = abs(target)
    # Keep moving while sum is
    # smaller or difference is odd.
    sum = 0
    step = 0
    while (sum < target or (sum - target) % 2 != 0) :
        step = step + 1
        sum = sum + step

    return step

    #greedy(wrong answer)
    r = 1
    jumps = 1
    l = 2
    while r != target:
        if r + l <= target:
            r += l
        else:
            r -= l
        l += 1
        jumps += 1
    return jumps
