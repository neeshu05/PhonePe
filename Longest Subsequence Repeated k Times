You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

A subsequence seq is repeated k times in the string s if seq * k is a subsequence of s, where seq * k represents a string constructed by concatenating seq k times.

For example, "bba" is repeated 2 times in the string "bababcba", because the string "bbabba", 
constructed by concatenating "bba" 2 times, is a subsequence of the string "bababcba".

Return the longest subsequence repeated k times in string s. If multiple such subsequences are found, 
return the lexicographically largest one. If there is no such subsequence, return an empty string.


def longestSubsequenceRepeatedK(self, s: str, k: int) -> str:
  #bfs
  
  def is_subsequences(target,word):
      n = len(target)
      m = len(word)
      while i < len(target) and j < len(word):
          if target[i] == word[i]:
              i += 1
          j += 1
          #checking if still target is left or not
      return i == n
  
  #charcters having count greater than k
  count = Counter(s)
  ans = [key for key,val in count.items() if val>=k]
  
  queue = deque([""])
  res = ""
  while queue:
    word = queue.popleft()
    for char in ans:
      word1 = word + char
      #checking for each combination of words
      if is_subsequence(word1*k,s):
        queue.append(word)
        res = word
   return res
  
  
