You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        memo = {}
        def helper(indx,buy,k):
            if (indx,buy,k) in memo:
                return memo[(indx,buy,k)]
            if k == 0:
                return 0
            if indx == n:
                return 0
            if buy:
                profit = max(-prices[indx] + helper(indx + 1,False,k),helper(indx + 1,True,k))
            else:
                profit = max(prices[indx] + helper(indx+1,True,k-1),helper(indx + 1,False,k))
            memo[(indx,buy,k)] = profit
            return memo[(indx,buy,k)]
        return helper(0,True,1)

✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔

def maxProfit(self, prices: List[int]) -> int:
    diff=0
    maxProf=0
    i=0
    for j in range(i+1, len(prices)):
        diff=prices[j]-prices[i]
        if prices[j]>prices[i]:
            maxProf=max(diff, maxProf)
        else:
            i=j
    return maxProf
