45. Jump Game 2
Given an array of non-negative integers nums, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

You can assume that you can always reach the last index.

//greedy + some initition of dp
//https://leetcode.com/problems/jump-game-ii/


def jump(self, nums: List[int]) -> int:t:
    if len(nums) == 1:
        return 0 #0 jumps

    pair = [0,0] #frist,second
    jumps = 0
    while pair[1] < len(nums):
        jumps += 1
        can_reach = -145. Jump Game II
Medium

8293

305

Add to List

Share
Given an array of non-negative integers nums, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

You can assume that you can always reach the last index.
        for i in range(pair[0],pair[1]+1):
            can_reach = max(can_reach,i + nums[i])
        if can_reach >= len(nums) - 1:
            return jumps
        pair = [pair[1]+ 1,can_reach]
    return -1
        
def jump(self, nums: List[int]) -> int:
    l = 0
    r = 0
    res = 0
    while r < len(nums)-1:
        far = 0
        for i in range(l,r+1):
            far = max(far,i + nums[i])

        l = r + 1
        r = far
        res += 1
    return res
